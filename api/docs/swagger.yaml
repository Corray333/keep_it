definitions:
  transport.CheckCodeRequest:
    description: Request structure for checking a code
    properties:
      code:
        type: string
      username:
        type: string
    type: object
  transport.CheckCodeResponse:
    description: Response structure for checking a code
    properties:
      valid:
        type: boolean
    type: object
  transport.CheckUsernameResponse:
    description: Check if a username exists
    properties:
      found:
        type: boolean
    type: object
  transport.LogInResponse:
    properties:
      authorization:
        type: string
      refresh:
        type: string
      user:
        $ref: '#/definitions/types.User'
    type: object
  types.User:
    properties:
      avatar:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      tg_username:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a user by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
      summary: Get a user by ID
      tags:
      - user
  /api/users/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns the user ID, refresh token, and access
        token.
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transport.LogInResponse'
      summary: Log in a user
      tags:
      - user
  /api/users/refresh_token:
    get:
      consumes:
      - application/json
      description: Refreshes the access token using the refresh token.
      parameters:
      - description: Refresh token
        in: query
        name: refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transport.LogInResponse'
      summary: Refresh access token
      tags:
      - user
  /api/users/signup:
    post:
      consumes:
      - application/json
      description: Registers a new user and returns the user ID, refresh token, and
        access token.
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transport.LogInResponse'
      summary: Sign up a new user
      tags:
      - user
  /api/users/update:
    put:
      consumes:
      - application/json
      description: Updates a user's details.
      parameters:
      - description: Updated user details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
      summary: Update a user
      tags:
      - user
  /check-code:
    post:
      consumes:
      - application/json
      description: Check if the provided code is valid for the given username
      parameters:
      - description: Request body for checking code
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/transport.CheckCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transport.CheckCodeResponse'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Check if a code is valid
      tags:
      - users
  /check-username:
    get:
      description: Check if a username exists in the database
      parameters:
      - description: Username to check
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transport.CheckUsernameResponse'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Check if a username exists
      tags:
      - users
swagger: "2.0"
